# Check Merge with sample vector vec
vec
pr[, pr$uid %in% vec]
# Check Merge with sample vector vec
vec <- c("8535", "8466", "8346", "8930", "9072")
pr[, pr$uid %in% vec]
pr[pr$uid %in% vec,]
pr[pr$uid %in% vec,]; po[po$uid %in% vec,]; df[df$uid %in% vec,];
stat.desc(scores, basic=F)
optoins(widht=10000)
options(widht=10000)
options(width=10000)
stat.desc(scores, basic=F)
options(width=500)
stat.desc(scores, basic=F)
options(width=507)
stat.desc(scores, basic=F)
options(width)
options(width=80)
stat.desc(scores, basic=F)
options(width=default)
options(width=NULL)
options(width=200)
stat.desc(scores, basic=F)
options(width=800)
stat.desc(scores, basic=F)
options(width=200)
stat.desc(scores, basic=F)
# Descriptives
summary(df)
summary(df$pr_raw)
summary(df$post.rawscr)
getwd
getwd()
res.rasch <- RM(pr)
library("psych")
#Rasch
res.rasch <- RM(pr)
library("psychometric")
#Rasch
res.rasch <- RM(pr)
library("eRm")
#Rasch
res.rasch <- RM(pr)
head(pr)
pr <- pr[c(-1:5)]
pr <- pr[c(-1, -2, -3, -4, -5)]
head(pr)
#Rasch
res.rasch <- RM(pr)
pres.rasch <- person.parameter(res.rasch)
#Andersen’s LR-test for goodness-of-fit with mean split criterion
lrres.rasch <- LRtest(res.rasch, splitcr = "mean")
lrres.rasch
plotGOF(lrres.rasch, beta.subset = c(14, 5, 18, 7, 1), tlab = "item",
conf = list(ia = FALSE, col = "green", lty = "dotted"))
#Wright Map
plotPImap(res.rasch, sorted = TRUE)
#Person Parameters
pres.rasch <- person.parameter(res.rasch)
#Item Fit
#For easy description of the fit statistics see: http://www.rasch.org/rmt/rmt82a.htm
itemfit(pres.rasch)
head(po)
po <- po[c(-1, -2, -3)]
head(po)
#Rasch
res.rasch <- RM(po)
pres.rasch <- person.parameter(res.rasch)
#Andersen’s LR-test for goodness-of-fit with mean split criterion
lrres.rasch <- LRtest(res.rasch, splitcr = "mean")
lrres.rasch
plotGOF(lrres.rasch, beta.subset = c(14, 5, 18, 7, 1), tlab = "item",
conf = list(ia = FALSE, col = "green", lty = "dotted"))
plotGOF(lrres.rasch, beta.subset = c(14, 5, 15, 3, 1), tlab = "item", # 14, 5, 18, 7, 1
conf = list(ia = FALSE, col = "green", lty = "dotted"))
#Wright Map
plotPImap(res.rasch, sorted = TRUE)
#Person Parameters
pres.rasch <- person.parameter(res.rasch)
#Item Fit
#For easy description of the fit statistics see: http://www.rasch.org/rmt/rmt82a.htm
itemfit(pres.rasch)
ls()
ls()
library("psych")
library("psychometric")
library("eRm")
library("pastecs")
library("polycor")
pr <- read.table("./Data/prsurvey.csv", header=TRUE, sep=",", as.is = TRUE)
po <- read.table("./Data/posurvey.csv", header=TRUE, sep=",", as.is = TRUE)
head(pr)
head(po)
pr <- pr[c(-1, -2, -3, -4, -5)]
po <- po[c(-1, -2, -3)]
head(po)
pr <- read.table("./Data/prsurvey.csv", header=TRUE, sep=",", as.is = TRUE)
po <- read.table("./Data/posurvey.csv", header=TRUE, sep=",", as.is = TRUE)
pr <- pr[c(-2, -3, -4, -5)]
po <- po[c(-2, -3)]
head(pr)
pr <- read.table("./Data/prsurvey.csv", header=TRUE, sep=",", as.is = TRUE)
po <- read.table("./Data/posurvey.csv", header=TRUE, sep=",", as.is = TRUE)
pr <- pr[c(-1, -3, -4, -5)]
po <- po[c(-2, -3)]
head(pr)
head(po)
pr <- read.table("./Data/prsurvey.csv", header=TRUE, sep=",", as.is = TRUE)
po <- read.table("./Data/posurvey.csv", header=TRUE, sep=",", as.is = TRUE)
pr <- pr[c(-1, -2, -4, -5)]
po <- po[c(-2, -3)]
head(pr)
head(po)
dim(po)
dim(pr)
# Reorder cols so linking items are first with same names
pr <- pr[,c(1,4,10,13,16,22,25,2,3,5:9,11,12,14,15,17:21,23,24)]
head(pr)
po <- po[,c(1,2,5,7,10,18,22,3,4,6,8,9,11:17,19:21,23:25)]
head(po)
colnames(po)
names(po)
names(pr)
names(pr) <- newnames; names(po) <- newnames
newnames <- c("id", "X.3.MD.UR", "X.12.MD.NUR", "X.16.MS.NUR", "X.21.ND.NUR", "X.34.MT.UR", "X.40.MT.NUR")
names(pr) <- newnames; names(po) <- newnames
names(pr)
names(po)
library("psych")
library("psychometric")
library("eRm")
library("pastecs")
library("polycor")
pr <- read.table("./Data/prsurvey.csv", header=TRUE, sep=",", as.is = TRUE)
po <- read.table("./Data/posurvey.csv", header=TRUE, sep=",", as.is = TRUE)
# Remove non-item and non-id cols
pr <- pr[c(-1, -2, -4, -5)]
po <- po[c(-2, -3)]
# Reorder cols so linking items are first with same names (3, 12, 16, 21, 34, 40)
pr <- pr[,c(1,4,10,13,16,22,25,2,3,5:9,11,12,14,15,17:21,23,24)]
po <- po[,c(1,2,5,7,10,18,22,3,4,6,8,9,11:17,19:21,23:25)]
head(pr)
head(po)
names(pr)[names(pr) == "X.3.MD.UR.pr..r"] <- "X.3.MD.UR_L.r"
head(pr)
# Keep all kids
link1 <- rbind(pr, po) # stack dataframes vertically (rbind)
# fill in non-overlapping columns with NAs
pr[setdiff(names(po), names(pr))] <- NA
po[setdiff(names(pr), names(po))] <- NA
head(pr)
head(po)
# Keep all kids
link1 <- rbind(pr, po) # stack dataframes vertically (rbind)
head(link1)
dim(link1)
dim(pr)
dim(po)
sapply(link1, function(y) sum(length(which(is.na(y)))))
library("dplyr")
# Only kids with both pr/po
po1 <- filter(po, uid %in% pr$uid)
dim(po1)
# Only kids with both pr/po
pr1 <- filter(pr, uid %in% po$uid)
dim(pr)
dim(pr1)
link2 <-  rbind(pr1, po1) #stack dataframes vertically
#Rasch
res.rasch <- RM(link1)
#Item and sum correlations
hetcor(link2,  ML = FALSE, std.err = TRUE,
use = c("complete.obs", "pairwise.complete.obs"), bins=4, pd=TRUE) # type can be pearson or spearman
#Principal Components
#Takes in raw data and extracts principal components using correlation matrix
fit <- princomp(link2, cor=TRUE)
# Determine Number of Factors to Extract
library(nFactors)
ev <- eigen(cor(link2)) # get eigenvalues
head(link2)
link <- link2[c(-1)]
#Item and sum correlations
hetcor(link,  ML = FALSE, std.err = TRUE,
use = c("complete.obs", "pairwise.complete.obs"), bins=4, pd=TRUE) # type can be pearson or spearman
#Principal Components
#Takes in raw data and extracts principal components using correlation matrix
fit <- princomp(link, cor=TRUE)
#Rasch
res.rasch <- RM(link)
pres.rasch <- person.parameter(res.rasch)
#Andersen’s LR-test for goodness-of-fit with mean split criterion
lrres.rasch <- LRtest(res.rasch, splitcr = "mean")
lrres.rasch
plotGOF(lrres.rasch, beta.subset = c(14, 5, 15, 3, 1), tlab = "item", # 14, 5, 18, 7, 1
conf = list(ia = FALSE, col = "green", lty = "dotted"))
#Wright Map
plotPImap(res.rasch, sorted = TRUE)
#Person Parameters
pres.rasch <- person.parameter(res.rasch)
#Item Fit
#For easy description of the fit statistics see: http://www.rasch.org/rmt/rmt82a.htm
itemfit(pres.rasch)
ls()
res.rasch
pres.rasch
lrres.rasch
#Item Discrimination
#The function takes data on individuals and their test scores and computes a total score to separate
#high and low ordered individuals. The upper and lower groups are defined as the top and bottom
#1/3 of the total. Discrimination is then computed and returned for each item using the formula:
#(number correct in the upper group - number correct in the lower group ) / size of each group
discrim(link2)
#Item Discrimination
#The function takes data on individuals and their test scores and computes a total score to separate
#high and low ordered individuals. The upper and lower groups are defined as the top and bottom
#1/3 of the total. Discrimination is then computed and returned for each item using the formula:
#(number correct in the upper group - number correct in the lower group ) / size of each group
discrim(pr)
head(po)
head(pr)
head(link)
head(pr)
head(po)
library("eRm")
library("dplyr")
pr <- read.table("./Data/prsurvey.csv", header=TRUE, sep=",", as.is = TRUE)
po <- read.table("./Data/posurvey.csv", header=TRUE, sep=",", as.is = TRUE)
# Remove non-item and non-id cols
pr <- pr[c(-1, -2, -4, -5)]
po <- po[c(-2, -3)]
# Reorder cols so linking items are first with same names (3, 12, 16, 21, 34, 40)
pr <- pr[,c(1,4,10,13,16,22,25,2,3,5:9,11,12,14,15,17:21,23,24)]
po <- po[,c(1,2,5,7,10,18,22,3,4,6,8,9,11:17,19:21,23:25)]
names(pr)[names(pr) == "X.3.MD.UR.pr..r"] <- "X.3.MD.UR_L.r"
names(pr)[names(pr) == "X.1.MD.UR_L.r"] <- "X.1.MD.UR.pr.r"
# fill in non-overlapping columns with NAs
pr[setdiff(names(po), names(pr))] <- NA
po[setdiff(names(pr), names(po))] <- NA
# Only kids with both pr/po
pr1 <- filter(pr, uid %in% po$uid)
po1 <- filter(po, uid %in% pr$uid)
link2 <-  rbind(pr1, po1) #stack dataframes vertically
link <- link2[c(-1)]
#Rasch
res.rasch <- RM(link)
pres.rasch <- person.parameter(res.rasch)
#Andersen’s LR-test for goodness-of-fit with mean split criterion
lrres.rasch <- LRtest(res.rasch, splitcr = "mean")
lrres.rasch
plotGOF(lrres.rasch, beta.subset = c(14, 5, 15, 3, 1), tlab = "item", # 14, 5, 18, 7, 1
conf = list(ia = FALSE, col = "green", lty = "dotted"))
# Keep all kids?
# link1 <- rbind(pr, po) # stack dataframes
sapply(link, function(y) sum(length(which(is.na(y))))) # this seems incorrect
link$X.1.MD.UR.pr.r
#Wright Map
plotPImap(res.rasch, sorted = TRUE)
#Person Parameters
pres.rasch <- person.parameter(res.rasch)
#Item Fit
#For easy description of the fit statistics see: http://www.rasch.org/rmt/rmt82a.htm
itemfit(pres.rasch)
res.rasch
pres.rasch
lrres.rasch
head(link)
head(pr)
head(po)
pr <- read.table("./Data/prsurvey.csv", header=TRUE, sep=",", as.is = TRUE)
po <- read.table("./Data/posurvey.csv", header=TRUE, sep=",", as.is = TRUE)
sapply(pr, function(y) sum(length(which(is.na(y))))) # 21 pre response vectors have no uid
# Join/merge the pre-test and post test files in wide format
df <- merge(pr, po, by = "uid")
head(df)
dim(pr); dim(po); dim(df) # only 343 kids completed both pre AND post?
vec <- c("8535", "8466", "8346", "8930", "9072")
pr[pr$uid %in% vec,]; po[po$uid %in% vec,]; df[df$uid %in% vec,]; # looks to have merged properly
# Write merge to file
write_csv(df, "./Data/mergeSurvey.csv", na = "NA", append = FALSE, col_names = TRUE)
library(readr) # For CSV file I/O
# Write merge to file
write_csv(df, "./Data/mergeSurvey.csv", na = "NA", append = FALSE, col_names = TRUE)
abilitypr <- read.table("./Data/prAbility.csv", header=TRUE, sep=",", as.is = TRUE)
abilitypo <- read.table("./Data/poAbility.csv", header=TRUE, sep=",", as.is = TRUE)
merge <- read.table("./Data/mergeSurvey.csv", header=TRUE, sep=",", as.is = TRUE)
head(merge)
df <- merge[,c("uid","g", "pr_raw", "post.rawscr")]
head(df)
head(abilitypo)
head(abilitypr)
pr <- abilitypr[,c("Raw","Est")]; po <- abilitypo[,c("Raw","Est")]
names(df)[names(df) == "post.rawscr"] <- "po_raw"
head(df)
head(pr)
df <- merge(x=df, y=pr, by.x="pr_raw", by.y="Raw")
head(df)
abilitypr <- read.table("./Data/prAbility.csv", header=TRUE, sep=",", as.is = TRUE)
abilitypo <- read.table("./Data/poAbility.csv", header=TRUE, sep=",", as.is = TRUE)
merge <- read.table("./Data/mergeSurvey.csv", header=TRUE, sep=",", as.is = TRUE)
df <- merge[,c("uid","g", "pr_raw", "post.rawscr")]
names(df)[names(df) == "post.rawscr"] <- "po_raw"
pr <- abilitypr[,c("pr_raw","pr_est")]; po <- abilitypo[,c("po_raw","po_est")]
head(pr)
head(df)
df <- merge(df, pr, by="pr_raw")
df <- merge(df, po, by="po_raw")
head(df)
cbind(df, diff=df$po_est-df$pr_est)
df <- cbind(df, diff=df$po_est-df$pr_est)
summary(abilitypr)
summary(abilitypr); summary(abilitypo)
summary(df)
hist(df$pr_est, col=2, breaks=10)
hist(df$po_est, col=2, breaks=10)
hist(df$pr_est, col=1, breaks=10)
hist(df$pr_est, col=3, breaks=10)
hist(df$pr_est, col=4, breaks=10)
hist(df$pr_est, col=5, breaks=10)
hist(df$po_est, col=5, breaks=10)
hist(df$pr_est, col=5, breaks=10)
hist(df$po_est, col=5, breaks=10)
hist(df$pr_est, col=5, breaks=10)
hist(df$po_est, col=5, breaks=10)
hist(df$diff, col=5, breaks=10)
# paired t-test
t.test(df$pr_est, df$po_est,paired=TRUE)
plot(df$pr_est, df$po_est)
head(df)
hist(df$diff, col=5, breaks=10)
hist(df$diff, col=5, breaks=20)
hist(df$diff, col=5, breaks=30)
hist(df$diff, col=5, breaks=30)
hist(df$diff, col=5, breaks=20)
hist(df$diff, col=5, breaks=25)
hist(df$diff, col=5, breaks=5)
hist(df$diff, col=5, breaks=10)
hist(df$diff, col=5, breaks=20)
hist(df$diff, col=5, breaks=30)
hist(df$diff, col=5, breaks=20)
#Wright Map
plotPImap(res.rasch, sorted = TRUE)
# Rasch Estimates for Link file (stacked pr and po dataframes)
library("eRm")
library("dplyr")
pr <- read.table("./Data/prsurvey.csv", header=TRUE, sep=",", as.is = TRUE)
po <- read.table("./Data/posurvey.csv", header=TRUE, sep=",", as.is = TRUE)
# Remove non-item and non-id cols
pr <- pr[c(-1, -2, -4, -5)]
po <- po[c(-2, -3)]
# Reorder cols so linking items are first with same names (3, 12, 16, 21, 34, 40)
pr <- pr[,c(1,4,10,13,16,22,25,2,3,5:9,11,12,14,15,17:21,23,24)]
po <- po[,c(1,2,5,7,10,18,22,3,4,6,8,9,11:17,19:21,23:25)]
names(pr)[names(pr) == "X.3.MD.UR.pr..r"] <- "X.3.MD.UR_L.r"
names(pr)[names(pr) == "X.1.MD.UR_L.r"] <- "X.1.MD.UR.pr.r"
# fill in non-overlapping columns with NAs
pr[setdiff(names(po), names(pr))] <- NA
po[setdiff(names(pr), names(po))] <- NA
# Keep all kids?
# link1 <- rbind(pr, po) # stack dataframes
# sapply(link1, function(y) sum(length(which(is.na(y))))) # this seems incorrect
# Only kids with both pr/po
pr1 <- filter(pr, uid %in% po$uid)
po1 <- filter(po, uid %in% pr$uid)
link2 <-  rbind(pr1, po1) #stack dataframes vertically
link <- link2[c(-1)]
#Rasch
res.rasch <- RM(link)
#Person Parameters
pres.rasch <- person.parameter(res.rasch)
#Andersen’s LR-test for goodness-of-fit with mean split criterion
lrres.rasch <- LRtest(res.rasch, splitcr = "mean")
lrres.rasch
plotGOF(lrres.rasch, beta.subset = c(14, 5, 15, 3, 1), tlab = "item", # 14, 5, 18, 7, 1
conf = list(ia = FALSE, col = "green", lty = "dotted"))
#Wright Map
plotPImap(res.rasch, sorted = TRUE)
#Item Fit
#For easy description of the fit statistics see: http://www.rasch.org/rmt/rmt82a.htm
itemfit(pres.rasch)
abilitypr <- read.table("./Data/prAbility.csv", header=TRUE, sep=",", as.is = TRUE)
abilitypo <- read.table("./Data/poAbility.csv", header=TRUE, sep=",", as.is = TRUE)
merge <- read.table("./Data/mergeSurvey.csv", header=TRUE, sep=",", as.is = TRUE)
df <- merge[,c("uid","g", "pr_raw", "post.rawscr")]
names(df)[names(df) == "post.rawscr"] <- "po_raw"
summary(df)
pr <- abilitypr[,c("pr_raw","pr_est")]; po <- abilitypo[,c("po_raw","po_est")]
df <- merge(df, pr, by="pr_raw")
df <- merge(df, po, by="po_raw")
df <- cbind(df, diff=df$po_est-df$pr_est) # add column with difference between ability estimates (po - pr)
hist(df$pr_est, col=5, breaks=10)
hist(df$pr_est, col=5, breaks=30)
hist(df$po_est, col=5, breaks=30)
hist(df$pr_est, col=5, breaks=30)
hist(df$po_est, col=5, breaks=30)
hist(df$diff, col=5, breaks=20)
hist(df$pr_est, col=5, breaks=20)
head(df)
treatment = rnorm(100,mean=10)
control = rnorm(100,mean=12)
d = (c(treatment,control))
f = rep(c("Treatment","Control"),each=100)
head(treatment)
head(control)
head(d)
head(f)
## compute Cohen's d
## treatment and control
cohen.d(treatment,control)
# effsize
library(effsize)
install.packages("effsize")
# effsize
library(effsize)
## compute Cohen's d
## treatment and control
cohen.d(treatment,control)
## data and factor
cohen.d(d,f)
## formula interface
cohen.d(d ~ f)
## compute Hedges' g
cohen.d(d,f,hedges.correction=TRUE)
## compute Cohen's d
cohen.d(df$po_est, df$pr_est)
## compute Hedges' g
cohen.d(df$po_est, df$pr_est, hedges.correction=TRUE)
# paired t-test
t.test(df$pr_est, df$po_est,paired=TRUE)
# Rasch Estimates for Link file (stacked pr and po dataframes)
library("eRm")
library("dplyr")
pr <- read.table("./Data/prsurvey.csv", header=TRUE, sep=",", as.is = TRUE)
po <- read.table("./Data/posurvey.csv", header=TRUE, sep=",", as.is = TRUE)
# Remove non-item and non-id cols
pr <- pr[c(-1, -2, -4, -5)]
po <- po[c(-2, -3)]
# Reorder cols so linking items are first with same names (3, 12, 16, 21, 34, 40)
pr <- pr[,c(1,4,10,13,16,22,25,2,3,5:9,11,12,14,15,17:21,23,24)]
po <- po[,c(1,2,5,7,10,18,22,3,4,6,8,9,11:17,19:21,23:25)]
names(pr)[names(pr) == "X.3.MD.UR.pr..r"] <- "X.3.MD.UR_L.r"
names(pr)[names(pr) == "X.1.MD.UR_L.r"] <- "X.1.MD.UR.pr.r"
# fill in non-overlapping columns with NAs
pr[setdiff(names(po), names(pr))] <- NA
po[setdiff(names(pr), names(po))] <- NA
# Keep all kids?
# link1 <- rbind(pr, po) # stack dataframes
# sapply(link1, function(y) sum(length(which(is.na(y))))) # this seems incorrect
# Only kids with both pr/po
pr1 <- filter(pr, uid %in% po$uid)
po1 <- filter(po, uid %in% pr$uid)
link2 <-  rbind(pr1, po1) #stack dataframes vertically
link <- link2[c(-1)]
#Rasch
res.rasch <- RM(link)
summary(res.rascj)
summary(res.rasch)
#Person Parameters
pres.rasch <- person.parameter(res.rasch)
pres.rasch
dim(pres.rasch)
dim(link)
plotICC(res.rasch)
plotjointICC(res.rasch)
view(pres.rasch)
View(pres.rasch)
pres.rasch[["theta.table"]][["Person Parameter"]]
count(unique(pres.rasch[["theta.table"]][["Person Parameter"]]))
table(pres.rasch[["theta.table"]][["Person Parameter"]])
uids <- link2[c(1)]
head(uids)
dim(uids)
personparams <- pres.rasch[["theta.table"]][["Person Parameter"]]
head(personparams)
dim(personparams)
is.vector(personparams)
is.data.frame(personparams)
personparams <- as.data.frame(pres.rasch[["theta.table"]][["Person Parameter"]])
dim(personparams)
personparams <- cbind(uids, personparams)
head(personparams)
names(personparams)[c(2)] <- "theta"
head(personparams)
prperson <- personparams[1:343,]
dim(prperson)
poperson <- personparams[344:,]
poperson <- personparams[344:686,]
names(prperson)[c(2)] <- "thetapr"
names(poperson)[c(2)] <- "thetapo"
head(poperson)
head(prperson)
persons <- merge(prperson, poperson, by="uid")
dim(person)
head(persons)
dim(persons)
persons <- cbind(persons, persons$thetapo - persons$thetapr)
head(persons)
persons <- cbind(persons, diff=persons$thetapo - persons$thetapr)
head(persons)
rm(persons)
persons <- merge(prperson, poperson, by="uid")
persons <- cbind(persons, diff=persons$thetapo - persons$thetapr)
head(persons)
dim(persons)
plot(df$pr_est, df$po_est)
hist(persons$thetapr, col=5, breaks=20)
hist(persons$thetapo, col=5, breaks=20)
hist(persons$thetapr, col=5, breaks=20)
hist(persons$diff, col=5, breaks=20)
plot(persons$thetapr, persons$thetapo)
persons$diff
table(persons$diff)
