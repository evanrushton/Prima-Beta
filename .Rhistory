num_mode_low = (N + 1 ) / 2
a <- round( lowVal + lowSpread * rnorm(num_mode_low) ) # {45, 45, 46, 46, 47, 48}
# Generate 7 random values near high + (high-low)
num_mode_high = N - num_mode_low
b <- round( highVal + highSpread * rnorm(num_mode_high) ) # {75, 25, 76, 76, 77, 78}
dist_1 = c(a, b)
fivenum(dist_1)
summary(dist_1)
dist_1
a
b
lowVal = 45
lowSpread = 3
highVal = 75
highSpread = 4
N = 15
# Generated 8 random values near low - 45
# choose N+1 / 2 random values around lowValue
num_mode_low = (N + 1 ) / 2
a <- round( lowVal + lowSpread * rnorm(num_mode_low) ) # {45, 45, 46, 46, 47, 48}
# Generate 7 random values near high + (high-low)
num_mode_high = N - num_mode_low
b <- round( highVal + (highVal - lowVal) + highSpread * rnorm(num_mode_high) ) # {75, 25, 76, 76, 77, 78}
dist_1 = c(a, b)
fivenum(dist_1)
summary(dist_1)
dist_1
dist_1 <- sort(dist_1)
dist_1
ls()
install.packages(c("nycflights13", "gapminder", "Lahman"))
12
1+2
tidyverse_update
tidyverse_update()
ls()
library(help="datasets")
X<-data("AirPassengers")
ls
pwd
pwdir
cwd
vars
ls()
head(x)
head(X)
head(AirPassengers)
head(X[1])
pwd()
# Library Imports
library(readr) # CSV file I/O
library(dplyr) # Data wrangling
# Load raw data dump
df1 <- read.table("./Data/PRIMA_2018-01-09_2018-08-09.csv", fill = TRUE, header = TRUE, sep = ",")
setwd("~/R-projects/Prima Beta R")
# Load raw data dump
df1 <- read.table("./Data/PRIMA_2018-01-09_2018-08-09.csv", fill = TRUE, header = TRUE, sep = ",")
df2 <- read.table("./Data/PRIMA_2018-09-09_2018-13-09.csv", fill = TRUE, header = TRUE, sep = ",")
df3 <- read.table("./Data/PRIMA_2018-13-09_2018-21-09.csv", fill = TRUE, header = TRUE, sep = ",")
df4 <- read.table("./Data/PRIMA_2018-21-09_2018-24-09.csv", fill = TRUE, header = TRUE, sep = ",")
df <- rbind(df1, df2, df3, df4)
head(df)
dim(df)
library(stringr)
str_split('{"challenge_type":"pen","problemType":"3US1NC"}', ',')
split <- str_split(df$actionData, ',')
ans <- df[ which(df$actionName == "submit_answer"), ]
dim(ans)
split <- str_split(ans$actionData, ',')
split[[1]]
ans$challenge_type <- sapply(split, '[[', 1)
ans$problem_type <- sapply(split, '[[', 2)
ans$success <- sapply(split, '[[', 3)
ans$attempt_count <- sapply(split, '[[', 4)
ans$latency <- sapply(split, '[[', 5)
head(ans)
dim(Ans)
dim(ans)
# Remove actionData
ans <- ans[,-"actionData"]
# Remove actionData
ans <- ans[,-c("actionData")]
# Remove actionData
ans <- ans[,!(names(ans) %in% c("actionData"))]
head(ans)
#### Clean ans actionData ####
pattern <- "((\\w*):(\\w*))" # \\1 <- HEADER:VALUE, \\2 <- HEADER, \\3 <- VALUE
ans[,5:9] <- sapply(ans[,5:9], function(y) gsub(pattern, replacement, y, perl=TRUE)) # HEADER:VALUE -> VALUE
# Remove header from value field
replacement <- "\\3"
ans[,5:9] <- sapply(ans[,5:9], function(y) gsub(pattern, replacement, y, perl=TRUE)) # HEADER:VALUE -> VALUE
head(ans)
gsub("((\\w*):(\\w*))", '\\2', '"attempt_count":2', perl=TRUE)
gsub("((\\w*):(\\w*))", '\\3', '"attempt_count":2', perl=TRUE)
gsub("((\\w*):(\\w*))", '\\4', '"attempt_count":2', perl=TRUE)
gsub("((\\w*):(\\w*))", '\\1', '"attempt_count":2', perl=TRUE)
gsub("((\\w*):(\\w*))", '\\5', '"attempt_count":2', perl=TRUE)
gsub("((\\w*):(\\w*))", '\\6', '"attempt_count":2', perl=TRUE)
gsub("(\\w*):(\\w*)", '\\3', '"attempt_count":2', perl=TRUE)
gsub("(\\w*):(\\w*)", '\\1', '"attempt_count":2', perl=TRUE)
gsub("(\\w*):(\\w*)", '\\2', '"attempt_count":2', perl=TRUE)
gsub("(\\w*):(\\w*)", '\\2', '"attempt_count":2', perl=TRUE)
gsub("((\\w*):(\\w*))", '\\3', '"attempt_count":2', perl=TRUE)
gsub("((\\w*):(\\w*))", '\\1', '"attempt_count":2', perl=TRUE)
gsub("((\\w*):(\\w*))", '\\2', '"attempt_count":2', perl=TRUE)
gsub("((\\w*):(\\w*))", '\\3', '"attempt_count":2', perl=TRUE)
gsub("((\\w+):(\\w+))", '\\3', '"attempt_count":2', perl=TRUE)
gsub("((\\w):(\\w))", '\\3', '"attempt_count":2', perl=TRUE)
gsub("((\\w):(\\w))", '\\2', '"attempt_count":2', perl=TRUE)
gsub("((\\w):(\\w))", '\\1', '"attempt_count":2', perl=TRUE)
gsub("((\\w*):(\\w*))", '\\2', '"attempt_count":2', perl=TRUE)
gsub("((\\w*):(\\w*))", '\\3', '"attempt_count":2', perl=TRUE)
gsub("((\\w*):(\\w*))", '\\3', '"attempt_count":crazy', perl=TRUE)
gsub("((\\w*):(\\w*))", '\\4', '"attempt_count":crazy', perl=TRUE)
gsub("((\\w*):(\\w*))", '\\5', '"attempt_count":crazy', perl=TRUE)
gsub("((\\w*):(\\w*))", '\\6', '"attempt_count":crazy', perl=TRUE)
gsub("(\\w*:(\\w*))", '\\2', '"attempt_count":crazy', perl=TRUE)
gsub("(\\w*:(\\w*))", '\\1', '"attempt_count":crazy', perl=TRUE)
gsub("(\\w*:(\\w*))", '\\3', '"attempt_count":crazy', perl=TRUE)
gsub("((\\w*):\\w*)", '\\3', '"attempt_count":crazy', perl=TRUE)
gsub("((\\w*):\\w*)", '\\2', '"attempt_count":crazy', perl=TRUE)
gsub("((\\w*):\\w*)", '\\1', '"attempt_count":crazy', perl=TRUE)
gsub("((\\w*):\\w*)", '\\3', '"attempt_count":crazy', perl=TRUE)
gsub("\\(\\w*\\):\\(\\w*\\)", '\\3', '"attempt_count":crazy', perl=TRUE)
gsub("\\(\\w*\\):\\(\\w*\\)", '\\2', '"attempt_count":crazy', perl=TRUE)
gsub("\\((\w*):(w*)\\)", '\\2', '"attempt_count":crazy', perl=TRUE)
gsub("\\((\\w*):(\\w*)\\)", '\\2', '"attempt_count":crazy', perl=TRUE)
gsub("\\((\\w*):(\\w*)\\)", '\\3', '"attempt_count":crazy', perl=TRUE)
gsub("\\((\\w*):(\\w*)\\)", '\\1', '"attempt_count":crazy', perl=TRUE)
gsub("\\((\\w*):(\\w*)\\)", '\1', '"attempt_count":crazy', perl=TRUE)
gsub("\\((\\w*):(\\w*)\\)", '\2', '"attempt_count":crazy', perl=TRUE)
gsub("(\\w*):(\\w*)", '\\2', '"attempt_count":crazy', perl=TRUE)
gsub("(\\w*):(\\w*)", '\\1', '"attempt_count":crazy', perl=TRUE)
gsub("(\\w*?):(\\w*?)", '\\1', '"attempt_count":crazy', perl=TRUE)
gsub("(\\w*?):(\\w*?)", '\\2', '"attempt_count":crazy', perl=TRUE)
gsub("(\\w*):(\\w*?)", '\\2', '"attempt_count":crazy', perl=TRUE)
gsub("(\\w*):(\\w*)", '\\2', '"attempt_count":crazy', perl=TRUE)
gsub("(\\w*):(\\w*)", '\\3', '"attempt_count":crazy', perl=TRUE)
str_match('"attempt_count":crazy', "(\\w*):(\\w*)")
str_match('"attempt_count":crazy', "(.*):(\\w*)")
gsub("(\\w*):(\\w*)", '\\3', '"attempt_count":crazy')
gsub("(\\w*):(\\w*)", '\\2', '"attempt_count":crazy')
gsub("\\w*:(\\w*)", '\\1', '"attempt_count":crazy')
gsub("\\w*:(\\w*)", '\\2', '"attempt_count":crazy')
gsub("^\\w*:(\\w*)$", '\\1', '"attempt_count":crazy')
gsub("^\\w*:(\\w*)$", '\\2', '"attempt_count":crazy')
gsub("\\w*?:(\\w*)", '\\2', '"attempt_count":crazy')
gsub("\\w*?:(\\w*)", '\\1', '"attempt_count":crazy')
gsub("\\w*?:(\\w*$)", '\\1', '"attempt_count":crazy')
gsub("\\w*?:(\\w*$)", '\\2', '"attempt_count":crazy')
gsub("\\w*?:(\\w*$)", '\\3', '"attempt_count":crazy')
gsub("\\w*?:(\\w*$)", '\\4', '"attempt_count":crazy')
regmatches('"attempt_count":crazy', regexpr("\\w*?:(\\w*$)", '"attempt_count":crazy'))
regmatches('"attempt_count":crazy', regexpr("\\w*?:(\\w*)", '"attempt_count":crazy'))
regmatches('"attempt_count":crazy', regexpr("\\w*:(\\w*)", '"attempt_count":crazy'))
sub("\\w*?:(\\w*)", '\\1', '"attempt_count":crazy')
sub("\\w*?:(\\w*?)", '\\1', '"attempt_count":crazy')
ans <- df[ which(df$actionName == "submit_answer"), ]
#### Text to Columns ####
split <- str_split(ans$actionData, ',')
ans$challenge_type <- sapply(split, '[[', 1)
ans$problem_type <- sapply(split, '[[', 2)
ans$success <- sapply(split, '[[', 3)
ans$attempt_count <- sapply(split, '[[', 4)
ans$latency <- sapply(split, '[[', 5)
# Remove actionData
ans <- ans[,!(names(ans) %in% c("actionData"))]
head(ans)
sub('\\w*:(\\w+?)','\\1',{"challenge_type":"pen")
sub('\\w*:(\\w+?)','\\1','{"challenge_type":"pen"')
sub('\\w*:(\\w+?)','\\2','{"challenge_type":"pen"')
sub('\\w*:(\\w+?)','\\3','{"challenge_type":"pen"')
sub('(\\w*):(\\w+?)','\\3','{"challenge_type":"pen"')
sub('(\\w*):(\\w+?)','\\2','{"challenge_type":"pen"')
sub('(\\w*):(\\w*)','\\2','{"challenge_type":"pen"')
sub('(\\w*):(\\w*?)','\\2','{"challenge_type":"pen"')
sub('(\\w*?):(\\w*?)','\\2','{"challenge_type":"pen"')
sub('(\\w*?):(\\w*?)','\\1','{"challenge_type":"pen"')
sub('(\\w*?):(\\w*?)','\\3','{"challenge_type":"pen"')
regexpr('(\\w*?):(\\w*?)','\\2','{"challenge_type":"pen"')
sub('(\\w*?):(\\w*?)','\\2','{"challenge_type":"pen"')
sub('(\\w*?):(\\w*?)','\\1','{"challenge_type":"pen"')
str_match('{"challenge_type":"pen"','(\\w*?):(\\w*?)')
str_match('{"challenge_type":"pen"','(\\w*):(\\w*)')
str_match('{"challenge_type":"pen"','\\w*:(\\w*)')
str_match('{"challenge_type":"pen"','.*:(.*)')
str_match('{"challenge_type":"pen"','.*:(\\w*)')
str_match('{"challenge_type":"pen"','.*:(.*)')
str_match('{"challenge_type":"pen"','.*:(.*)')[2]
ans[,5:9] <- sapply(ans[,5:9], function(y) str_match(y, '.*:(.*)')[2]) # HEADER:VALUE -> VALUE
head(ans)
ans <- as.data.frame(ans)
ans <- df[ which(df$actionName == "submit_answer"), ]
#### Text to Columns ####
split <- str_split(ans$actionData, ',')
ans$challenge_type <- sapply(split, '[[', 1)
ans$problem_type <- sapply(split, '[[', 2)
ans$success <- sapply(split, '[[', 3)
ans$attempt_count <- sapply(split, '[[', 4)
ans$latency <- sapply(split, '[[', 5)
# Remove actionData
ans <- ans[,!(names(ans) %in% c("actionData"))]
#### Clean ans actionData ####
pattern <- '^.*:(\\w*)'
# Remove header from value field
replacement <- "\\3"
sub(pattern, replacement, '{"challenge_type":"order"' , perl=T )
sub(pattern, replacement, '"success":true' , perl=T )
#### Clean ans actionData ####
pattern <- '^.*:(.*)'
sub(pattern, replacement, '"success":true' , perl=T )
sub(pattern, replacement, '{"challenge_type":"order"' , perl=T )
# Remove header from value field
replacement <- "\\2"
sub(pattern, replacement, '{"challenge_type":"order"' , perl=T )
sub(pattern, replacement, '"success":true' , perl=T )
#### Clean ans actionData ####
pattern <- '^.*:(\\w*)'
# Remove header from value field
replacement <- "\\3"
sub(pattern, replacement, '"success":true' , perl=T )
sub(pattern, replacement, '{"challenge_type":"order"' , perl=T )
sub(pattern, replacement, '"problem_type":"3US2MC"' , perl=T )
sub(pattern, replacement, '"attempt_count":1' , perl=T )
sub(pattern, replacement, '"latency":75.051}' , perl=T )
# Remove header from value field
replacement <- "\\2"
sub(pattern, replacement, '"latency":75.051}' , perl=T )
\\1
# Remove header from value field
replacement <- "\\1"
sub(pattern, replacement, '"latency":75.051}' , perl=T )
sub(pattern, replacement, '"attempt_count":1' , perl=T )
sub(pattern, replacement, '"problem_type":"3US2MC"' , perl=T )
sub(pattern, replacement, '{"challenge_type":"order"' , perl=T )
sub(pattern, replacement, '"success":true' , perl=T )
ans[,5:9] <- sapply(ans[,5:9], function(y) gsub(pattern, replacement, y, perl=T)) # HEADER:VALUE -> VALUE
ans <- as.data.frame(ans)
ans <- df[ which(df$actionName == "submit_answer"), ]
#### Text to Columns ####
split <- str_split(ans$actionData, ',')
ans$challenge_type <- sapply(split, '[[', 1)
ans$problem_type <- sapply(split, '[[', 2)
ans$success <- sapply(split, '[[', 3)
ans$attempt_count <- sapply(split, '[[', 4)
ans$latency <- sapply(split, '[[', 5)
# Remove actionData
ans <- ans[,!(names(ans) %in% c("actionData"))]
#### Clean ans actionData ####
pattern <- '^.*:([:alnum:]*)'
# Remove header from value field
replacement <- "\\1"
sub(pattern, replacement, '"success":true' , perl=T )
sub(pattern, replacement, '"success":true')
sub(pattern, replacement, '{"challenge_type":"order"')
#### Clean ans actionData ####
pattern <- '^.*:(\\w*)'
# Remove header from value field
replacement <- "\\1"
ans[,5:9] <- sapply(ans[,5:9], function(y) gsub(pattern, replacement, y, perl=T)) # HEADER:VALUE -> VALUE
# Remove } and \"
ans[,9] <- sapply(ans[,9], function(y) gsub("}", "", y))
ans <- as.data.frame(ans)
sub('\\\\"', "", '\"3US1NC\"')
sub('\\\\', "", '\"3US1NC\"')
sub('\\\', "", '\"3US1NC\"')
sub('\\', "", '\"3US1NC\"')
sub('\\\\', "", '\"3US1NC\"')
sub('\\\\\"', "", '\"3US1NC\"')
sub("[[:punct:]]", "", '\"3US1NC\"')
gsub("[[:punct:]]", "", '\"3US1NC\"')
ans[,5:6] <- sapply(ans[,5:6], function(y) gsub("[[:punct:]]", "", y))
ans <- as.data.frame(ans)
head(ans)
View(df)
# Select 1st attempts only
ans$attempt_count <- as.integer(ans$attempt_count)
dim(ans)
ans <- ans[which(ans$attempt_count == 1) ,]
dim(ans)
dim(df)
dim(df1)
dim(df2)
dim(df3)
dim(df4)
ans <- df[ which(df$actionName == "submit_answer"), ]
dim(ans)
split <- str_split(ans$actionData, ',')
ans$challenge_type <- sapply(split, '[[', 1)
ans$problem_type <- sapply(split, '[[', 2)
ans$success <- sapply(split, '[[', 3)
ans$attempt_count <- sapply(split, '[[', 4)
ans$latency <- sapply(split, '[[', 5)
dim(ans)
# Remove actionData
ans <- ans[,!(names(ans) %in% c("actionData"))]  # 4728   9
#### Clean ans actionData ####
pattern <- '^.*:(\\w*)' #  HEADER:VALUE, \\1 <- VALUE
replacement <- "\\1"
ans[,5:9] <- sapply(ans[,5:9], function(y) gsub(pattern, replacement, y, perl=T)) # HEADER:VALUE -> VALUE
ans <- as.data.frame(ans)
# Remove } and \"
ans[,9] <- sapply(ans[,9], function(y) gsub("}", "", y))
ans <- as.data.frame(ans)
ans[,5:6] <- sapply(ans[,5:6], function(y) gsub("[[:punct:]]", "", y))
ans <- as.data.frame(ans)
head(ans)
# Select 1st attempts only
ans$attempt_count <- as.integer(ans$attempt_count)
ans <- ans[which(ans$attempt_count == 1) ,] # 3403
length(unique(ans$userId))
length(unique(paste0(ans$challenge_type, ans$problem_type))
)
unique(paste0(ans$challenge_type, ans$problem_type))
source("./functions.R")
source("./functions.R")
# Library Imports
library(readr) # CSV file I/O
library(dplyr) # Data wrangling
library(stringr)
source("./functions.R")
install.packages(dplyr)
install.packages("dplyr")
library(dplyr) # Data wrangling
# Load raw data dump
df1 <- read.table("./Data/PRIMA_2018-01-09_2018-08-09.csv", fill = TRUE, header = TRUE, sep = ",") # 19143     5
df2 <- read.table("./Data/PRIMA_2018-09-09_2018-13-09.csv", fill = TRUE, header = TRUE, sep = ",") # 37882     5
df3 <- read.table("./Data/PRIMA_2018-13-09_2018-21-09.csv", fill = TRUE, header = TRUE, sep = ",") # 40871     5
df4 <- read.table("./Data/PRIMA_2018-21-09_2018-24-09.csv", fill = TRUE, header = TRUE, sep = ",") # 14885     5
df <- rbind(df1, df2, df3, df4) # 112781      5
View(submit_answer_data)
ans <- submit_answer_data(df) # 4728    5
dim(ans)
source("./functions.R")
# Select 1st attempts only
ans$attempt_count <- as.integer(ans$attempt_count)
ans <- ans[which(ans$attempt_count == 1) ,] # 3403   9
length(unique(ans$userId)) # 242 unique users
length(unique(paste0(ans$challenge_type, ans$problem_type))) # 41 unique challenge+problem types
unique(paste0(ans$challenge_type, ans$problem_type))
ans <- read.table("./Data/submit_answer.csv", header=TRUE, sep=",", as.is = TRUE) #  15124 rows
# Select 1st attempts only
ans <- ans[which(ans$attempt_count == 1), ] # 8524 rows
ans <- ans[ order(ans[,2], ans[,5]), ] # Order by userId and gameLevel
# Find duplicate uid/game level
ans <- ans[!duplicated(ans[c("userId","gameLevel")]), ] # Remove duplicates (8407 rows)
# Load raw data dump
PATH = "./Data/primaBeta.csv"
df <- read.table(PATH, fill = TRUE, header = TRUE, sep = ",")
# Select rows by actionName
ans <- df[ which(df$actionName == "submit_answer"), ]
ans <- read.table("./Data/submit_answer.csv", header=TRUE, sep=",", as.is = TRUE) #  15124 rows
# Select 1st attempts only
ans <- ans[which(ans$attempt_count == 1), ] # 8524 rows
ans <- ans[ order(ans[,2], ans[,5]), ] # Order by userId and gameLevel
# Find duplicate uid/game level
ans <- ans[!duplicated(ans[c("userId","gameLevel")]), ] # Remove duplicates (8407 rows)
unique(paste0(ans$challenge_type, ans$problem_type))
length(unique(paste0(ans$challenge_type, ans$problem_type)))
# Check difference with old Beta data
ans.old <- read.table("./Data/submit_answer.csv", header=TRUE, sep=",", as.is = TRUE) #  15124 rows
# Select 1st attempts only
ans.old <- ans.old[which(ans$attempt_count == 1), ] # 8524 rows
ans.old <- ans.old[ order(ans.old[,2], ans.old[,5]), ] # Order by userId and gameLevel
# Find duplicate uid/game level
ans.old <- ans.old[!duplicated(ans[c("userId","gameLevel")]), ] # Remove duplicates (8407 rows)
df1 <- read.table("./Data/PRIMA_2018-01-09_2018-08-09.csv", fill = TRUE, header = TRUE, sep = ",") # 19143     5
df2 <- read.table("./Data/PRIMA_2018-09-09_2018-13-09.csv", fill = TRUE, header = TRUE, sep = ",") # 37882     5
df3 <- read.table("./Data/PRIMA_2018-13-09_2018-21-09.csv", fill = TRUE, header = TRUE, sep = ",") # 40871     5
df4 <- read.table("./Data/PRIMA_2018-21-09_2018-24-09.csv", fill = TRUE, header = TRUE, sep = ",") # 14885     5
df <- rbind(df1, df2, df3, df4) # 112781      5
ans <- clean_submit_answer_data(df) # 4728    9
# Select 1st attempts only
ans$attempt_count <- as.integer(ans$attempt_count)
ans <- ans[which(ans$attempt_count == 1) ,] # 3403   9
length(unique(ans$userId)) # 242 unique users
length(unique(paste0(ans$challenge_type, ans$problem_type))) # 41 unique challenge+problem types
ans$chalprob <- unique(paste0(ans$challenge_type, ans$problem_type))
# Check difference with old Beta data
ans.old <- read.table("./Data/submit_answer.csv", header=TRUE, sep=",", as.is = TRUE) #  15124 rows
# Select 1st attempts only
ans.old <- ans.old[which(ans$attempt_count == 1), ] # 8524 rows
ans.old <- ans.old[ order(ans.old[,2], ans.old[,5]), ] # Order by userId and gameLevel
# Find duplicate uid/game level
ans.old <- ans.old[!duplicated(ans[c("userId","gameLevel")]), ] # Remove duplicates (8407 rows)
# Find duplicate uid/game level
ans.old <- ans.old[!duplicated(ans.old[c("userId","gameLevel")]), ] # Remove duplicates (8407 rows)
ans.old$chal_prob <- unique(paste0(ans.old$challenge_type, ans.old$problem_type))
ans$chalprob
ans.old$chal_prob <- paste0(ans.old$challenge_type, ans.old$problem_type)
# Library Imports
library(readr) # CSV file I/O
library(dplyr) # Data wrangling
library(stringr)
source("./functions.R")
# Load raw data dump
df1 <- read.table("./Data/PRIMA_2018-01-09_2018-08-09.csv", fill = TRUE, header = TRUE, sep = ",") # 19143     5
df2 <- read.table("./Data/PRIMA_2018-09-09_2018-13-09.csv", fill = TRUE, header = TRUE, sep = ",") # 37882     5
df3 <- read.table("./Data/PRIMA_2018-13-09_2018-21-09.csv", fill = TRUE, header = TRUE, sep = ",") # 40871     5
df4 <- read.table("./Data/PRIMA_2018-21-09_2018-24-09.csv", fill = TRUE, header = TRUE, sep = ",") # 14885     5
df <- rbind(df1, df2, df3, df4) # 112781      5
ans <- clean_submit_answer_data(df) # 4728    9
head(ans)
# Select 1st attempts only
ans$attempt_count <- as.integer(ans$attempt_count)
ans <- ans[which(ans$attempt_count == 1) ,] # 3403   9
ans$chal_prob <- paste0(ans$challenge_type, ans$problem_type)
# Check difference with old Beta data
ans.old <- read.table("./Data/submit_answer.csv", header=TRUE, sep=",", as.is = TRUE) #  15124 rows
# Select 1st attempts only
ans.old <- ans.old[which(ans$attempt_count == 1), ] # 8524 rows
ans.old <- ans.old[ order(ans.old[,2], ans.old[,5]), ] # Order by userId and gameLevel
# Find duplicate uid/game level
ans.old <- ans.old[!duplicated(ans.old[c("userId","gameLevel")]), ] # Remove duplicates (8407 rows)
# Clean out punctuation columns c("challenge_type", "problem_type")
ans.old[,c("challenge_type", "problem_type")] <- sapply(ans.old[,c("challenge_type", "problem_type")], function(y) gsub("[[:punct:]]", "", y))
ans.old <- as.data.frame(ans.old)
ans.old$chal_prob <- paste0(ans.old$challenge_type, ans.old$problem_type)
length(unique(ans.old$gameLevel))
levelType <- ans.old[which(unique(ans.old$gameLevel)), c("gameLevel", "chal_prob")]
levelType <- ans.old[which(!duplicated(ans.old$gameLevel)), c("gameLevel", "chal_prob")]
levelType
length(unique(ans.old$chal_prob))
length(unique(paste0(ans$challenge_type, ans$problem_type))) # 41 unique challenge+problem types
setdiff(unique(ans.old$chal_prob), unique(ans$chal_prob)
)
unique(ans$chal_prob)
unique(ans.old$chal_prob)
# Library Imports
library(readr) # CSV file I/O
library(dplyr) # Data wrangling
# Load raw data dump (used Excel text to columns)
PATH = "./Data/primaBeta.csv"
df <- read.table(PATH, fill = TRUE, header = TRUE, sep = ",")
#sapply(df, function(y) sum(length(which(is.na(y)))))
# Select rows by actionName
ans <- df[ which(df$actionName == "submit_answer"), ]
# Select desired cols
ans <- ans[c(1,6,11,5,12:18)]
pattern <- "((\\w*):(\\w*))" # \\1 <- HEADER:VALUE, \\2 <- HEADER, \\3 <- VALUE
# Set headers as captured header group
header <- "\\2"
headers <- lapply(ans[1, c(7:11)], function(y) gsub(pattern, header, y))
names(ans)[7:11] <- headers
names(ans)[c(7,8,11)] <- c("challenge_type", "problem_type", "latency")
# Remove header from value field
replacement <- "\\3"
ans[,7:11] <- sapply(ans[,7:11], function(y) gsub(pattern, replacement, y, perl=TRUE)) # HEADER:VALUE -> VALUE
ans <- as.data.frame(ans)
# Remove } and {"challenge_type"
ans[,11] <- sapply(ans[,11], function(y) gsub("}", "", y))
ans <- as.data.frame(ans)
ans[,7] <- sapply(ans[,7], function(y) gsub('\\{\\"challenge_type\\"', "", y))
ans <- as.data.frame(ans)
head(ans)
# Remove \"
ans[,c("challenge_type", "problem_type")] <- sapply(ans[,c("challenge_type", "problem_type")], function(y) gsub("[[:punct:]]", "", y))
ans <- as.data.frame(ans)
head(ans)
# Relabel improperly labeled levels
ans$gameLevel <- as.character(ans$gameLevel)
ans$gameLevel[ans$gameLevel == "2.05"] <- "2.03a"
ans$gameLevel[ans$gameLevel == "3.02b"] <- "3.01b"
ans$gameLevel[ans$gameLevel == "3.04b"] <- "3.03b"
ans$gameLevel[ans$gameLevel == "3.04d"] <- "3.03d"
ans$gameLevel <- as.factor(ans$gameLevel)
ans$userId <- as.integer(as.character(ans$userId))
ans$sessionOrder <- as.integer(as.character(ans$sessionOrder))
ans$totalTimePlayed <- as.integer(as.character(ans$totalTimePlayed))
ans$success <- as.integer(as.logical(ans$success)) # convert true/false to 1/0
ans$attempt_count <- as.integer(as.character(ans$attempt_count))
ans$latency <- as.numeric(ans$latency)
ans$clientTimeStamp <- as.character(ans$clientTimeStamp) # strptime( ,"%m/%d/%Y %H:%M:%OS3")
write_csv(ans, "./Data/submit_answer.csv", na = "NA", append = FALSE, col_names = TRUE)
# Library Imports
library(readr) # CSV file I/O
library(dplyr) # Data wrangling
library(stringr)
source("./functions.R")
# Load raw data dump
df1 <- read.table("./Data/PRIMA_2018-01-09_2018-08-09.csv", fill = TRUE, header = TRUE, sep = ",") # 19143     5
df2 <- read.table("./Data/PRIMA_2018-09-09_2018-13-09.csv", fill = TRUE, header = TRUE, sep = ",") # 37882     5
df3 <- read.table("./Data/PRIMA_2018-13-09_2018-21-09.csv", fill = TRUE, header = TRUE, sep = ",") # 40871     5
df4 <- read.table("./Data/PRIMA_2018-21-09_2018-24-09.csv", fill = TRUE, header = TRUE, sep = ",") # 14885     5
df <- rbind(df1, df2, df3, df4) # 112781      5
ans <- clean_submit_answer_data(df) # 4728    9
head(ans)
# Select 1st attempts only
ans$attempt_count <- as.integer(ans$attempt_count)
ans <- ans[which(ans$attempt_count == 1) ,] # 3403   9
length(unique(ans$userId)) # 242 unique users
length(unique(paste0(ans$challenge_type, ans$problem_type))) # 41 unique challenge+problem types
# Create column for challenge+problem type
ans$chal_prob <- paste0(ans$challenge_type, ans$problem_type)
str(Ans)
str(ans)
# Check difference with old Beta data
ans.old <- read.table("./Data/submit_answer.csv", header=TRUE, sep=",", as.is = TRUE) #  15124 rows
# Select 1st attempts only
ans.old <- ans.old[which(ans$attempt_count == 1), ] # 8524 rows
ans.old <- ans.old[ order(ans.old[,2], ans.old[,5]), ] # Order by userId and gameLevel
# Find duplicate uid/game level
ans.old <- ans.old[!duplicated(ans.old[c("userId","gameLevel")]), ] # Remove duplicates (8407 rows)
length(unique(ans.old$userId))
# Create column for challenge+problem type
ans.old$chal_prob <- paste0(ans.old$challenge_type, ans.old$problem_type)
betaLevelType <- ans.old[which(!duplicated(ans.old$gameLevel)), c("gameLevel", "chal_prob")]
setdiff(unique(ans.old$chal_prob), unique(ans$chal_prob))
betaLevelType
betaLevelType[,1:2]
setdiff(unique(ans.old$chal_prob), unique(ans$chal_prob))
setdiff(unique(ans$chal_prob), unique(ans.old$chal_prob))
